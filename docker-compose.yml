networks:
  dev:

services:
  nginx:
    container_name: nginx
    image: nginx:stable-alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - "./nginx/nginx.conf:/etc/nginx/nginx.conf"
      - ./frontend/build:/usr/share/nginx/html
    restart: always
    depends_on:
      - backend
      - frontend
    networks:
      - dev

  backend:
    container_name: backend
    build:
      context: ./backend/django
      dockerfile: Dockerfile
    environment:
      POSTGRES_USER: postgres_user        
      POSTGRES_PASSWORD: 123                
      POSTGRES_DB: Monopoly_game            
      POSTGRES_HOST: localhost                
      POSTGRES_DB_PORT: 5432                
    working_dir: /usr/src/app/
    ports:
      - "8000:8000"  
    volumes:
      - ./backend/django:/usr/src/app
    depends_on:
      - postgres
      - redis
    command: sh -c "python manage.py makemigrations && python manage.py migrate && python manage.py runserver 0.0.0.0:8000"
    networks:
      - dev

  frontend:
    container_name: frontend
    build:
      context: ./frontend
      dockerfile: Dockerfile
    networks:
      - dev

  postgres:
    image: postgres:alpine
    container_name: postgres
    restart: always
    environment:
      POSTGRES_USER: postgres_user
      POSTGRES_PASSWORD: 123
      POSTGRES_DB: Monopoly_game
      POSTGRES_HOST: postgres 
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data/
    networks:
      - dev

  redis:
    image: redis:alpine
    container_name: redis
    restart: always
    ports:
      - "6379:6379"
    networks:
      - dev

  redis-commander:
    container_name: redis-commander
    hostname: redis-commander
    image: ghcr.io/joeferner/redis-commander:latest
    restart: always
    environment:
      REDIS_HOSTS: local:redis:6379
      HTTP_USER: redis_user         
      HTTP_PASSWORD: redis_pass      
    ports:
      - "8081:8081"  
    depends_on:
      - redis
    networks:
      - dev

  celery-worker:
    build:
      context: ./backend/django
      dockerfile: Dockerfile
    container_name: celery-worker
    restart: always
    working_dir: /usr/src/app/
    environment:
      REDIS_LOCATION: redis://redis:6379/0
      CELERY_BROKER_URL: amqp://rabbit_user:rabbit_pass@rabbitmq:5672//
      CELERY_RESULT_BACKEND: redis://redis:6379/0
    volumes:
      - ./backend/django:/usr/src/app  
      - media:/app/media
    command: celery -A celery worker --loglevel=info
    depends_on:
      - redis
      - rabbitmq
      - backend
    networks:
      - dev

  celery-beat:
    build:
      context: ./backend/django
      dockerfile: Dockerfile
    container_name: celery-beat
    restart: always
    working_dir: /usr/src/app/
    environment:
      REDIS_LOCATION: redis://redis:6379/0
      CELERY_BROKER_URL: amqp://rabbit_user:rabbit_pass@rabbitmq:5672//
      CELERY_RESULT_BACKEND: redis://redis:6379/0
    volumes:
      - ./backend/django:/usr/src/app  
      - media:/app/media
    depends_on:
      - redis
      - rabbitmq
      - backend
    command: celery -A celery beat --loglevel=info
    networks:
      - dev

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: rabbit_user  
      RABBITMQ_DEFAULT_PASS: rabbit_pass    
    ports:
      - "15672:15672"    
      - "5672:5672"      
    networks:
      - dev

volumes:
  pgdata:
  media: